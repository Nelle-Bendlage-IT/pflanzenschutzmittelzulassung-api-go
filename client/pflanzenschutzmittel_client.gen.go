// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	. "github.com/Nelle-Bendlage-IT/pflanzenschutzmittelzulassung-api-go/models"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdresse request
	GetAdresse(ctx context.Context, params *GetAdresseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAntrag request
	GetAntrag(ctx context.Context, params *GetAntragParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuflageRedu request
	GetAuflageRedu(ctx context.Context, params *GetAuflageReduParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuflagen request
	GetAuflagen(ctx context.Context, params *GetAuflagenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwg request
	GetAwg(ctx context.Context, params *GetAwgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgAufwand request
	GetAwgAufwand(ctx context.Context, params *GetAwgAufwandParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgBem request
	GetAwgBem(ctx context.Context, params *GetAwgBemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgKultur request
	GetAwgKultur(ctx context.Context, params *GetAwgKulturParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgPartner request
	GetAwgPartner(ctx context.Context, params *GetAwgPartnerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgPartnerAufwand request
	GetAwgPartnerAufwand(ctx context.Context, params *GetAwgPartnerAufwandParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgSchadorg request
	GetAwgSchadorg(ctx context.Context, params *GetAwgSchadorgParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgVerwendungszweck request
	GetAwgVerwendungszweck(ctx context.Context, params *GetAwgVerwendungszweckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgWartezeit request
	GetAwgWartezeit(ctx context.Context, params *GetAwgWartezeitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgWartezeitAusgKultur request
	GetAwgWartezeitAusgKultur(ctx context.Context, params *GetAwgWartezeitAusgKulturParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgZeitpunkt request
	GetAwgZeitpunkt(ctx context.Context, params *GetAwgZeitpunktParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAwgZulassung request
	GetAwgZulassung(ctx context.Context, params *GetAwgZulassungParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGhsGefahrenhinweise request
	GetGhsGefahrenhinweise(ctx context.Context, params *GetGhsGefahrenhinweiseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGhsGefahrensymbole request
	GetGhsGefahrensymbole(ctx context.Context, params *GetGhsGefahrensymboleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGhsSicherheitshinweise request
	GetGhsSicherheitshinweise(ctx context.Context, params *GetGhsSicherheitshinweiseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGhsSignalwoerter request
	GetGhsSignalwoerter(ctx context.Context, params *GetGhsSignalwoerterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHinweis request
	GetHinweis(ctx context.Context, params *GetHinweisParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKode request
	GetKode(ctx context.Context, params *GetKodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKodeliste request
	GetKodeliste(ctx context.Context, params *GetKodelisteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKodelisteFeldname request
	GetKodelisteFeldname(ctx context.Context, params *GetKodelisteFeldnameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKulturGruppe request
	GetKulturGruppe(ctx context.Context, params *GetKulturGruppeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMittel request
	GetMittel(ctx context.Context, params *GetMittelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMittelAbgelaufen request
	GetMittelAbgelaufen(ctx context.Context, params *GetMittelAbgelaufenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMittelAbpackung request
	GetMittelAbpackung(ctx context.Context, params *GetMittelAbpackungParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMittelGefahrenSymbol request
	GetMittelGefahrenSymbol(ctx context.Context, params *GetMittelGefahrenSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMittelVertrieb request
	GetMittelVertrieb(ctx context.Context, params *GetMittelVertriebParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMittelWirkbereich request
	GetMittelWirkbereich(ctx context.Context, params *GetMittelWirkbereichParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetParallelimportAbgelaufen request
	GetParallelimportAbgelaufen(ctx context.Context, params *GetParallelimportAbgelaufenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetParallelimportGueltig request
	GetParallelimportGueltig(ctx context.Context, params *GetParallelimportGueltigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchadorgGruppe request
	GetSchadorgGruppe(ctx context.Context, params *GetSchadorgGruppeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaerkung request
	GetStaerkung(ctx context.Context, params *GetStaerkungParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaerkungVertrieb request
	GetStaerkungVertrieb(ctx context.Context, params *GetStaerkungVertriebParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStand request
	GetStand(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWirkstoff request
	GetWirkstoff(ctx context.Context, params *GetWirkstoffParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWirkstoffGehalt request
	GetWirkstoffGehalt(ctx context.Context, params *GetWirkstoffGehaltParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZusatzstoff request
	GetZusatzstoff(ctx context.Context, params *GetZusatzstoffParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZusatzstoffVertrieb request
	GetZusatzstoffVertrieb(ctx context.Context, params *GetZusatzstoffVertriebParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdresse(ctx context.Context, params *GetAdresseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdresseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAntrag(ctx context.Context, params *GetAntragParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAntragRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuflageRedu(ctx context.Context, params *GetAuflageReduParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuflageReduRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuflagen(ctx context.Context, params *GetAuflagenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuflagenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwg(ctx context.Context, params *GetAwgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgAufwand(ctx context.Context, params *GetAwgAufwandParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgAufwandRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgBem(ctx context.Context, params *GetAwgBemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgBemRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgKultur(ctx context.Context, params *GetAwgKulturParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgKulturRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgPartner(ctx context.Context, params *GetAwgPartnerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgPartnerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgPartnerAufwand(ctx context.Context, params *GetAwgPartnerAufwandParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgPartnerAufwandRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgSchadorg(ctx context.Context, params *GetAwgSchadorgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgSchadorgRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgVerwendungszweck(ctx context.Context, params *GetAwgVerwendungszweckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgVerwendungszweckRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgWartezeit(ctx context.Context, params *GetAwgWartezeitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgWartezeitRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgWartezeitAusgKultur(ctx context.Context, params *GetAwgWartezeitAusgKulturParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgWartezeitAusgKulturRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgZeitpunkt(ctx context.Context, params *GetAwgZeitpunktParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgZeitpunktRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAwgZulassung(ctx context.Context, params *GetAwgZulassungParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAwgZulassungRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGhsGefahrenhinweise(ctx context.Context, params *GetGhsGefahrenhinweiseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGhsGefahrenhinweiseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGhsGefahrensymbole(ctx context.Context, params *GetGhsGefahrensymboleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGhsGefahrensymboleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGhsSicherheitshinweise(ctx context.Context, params *GetGhsSicherheitshinweiseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGhsSicherheitshinweiseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGhsSignalwoerter(ctx context.Context, params *GetGhsSignalwoerterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGhsSignalwoerterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHinweis(ctx context.Context, params *GetHinweisParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHinweisRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKode(ctx context.Context, params *GetKodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKodeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKodeliste(ctx context.Context, params *GetKodelisteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKodelisteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKodelisteFeldname(ctx context.Context, params *GetKodelisteFeldnameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKodelisteFeldnameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKulturGruppe(ctx context.Context, params *GetKulturGruppeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKulturGruppeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMittel(ctx context.Context, params *GetMittelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMittelRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMittelAbgelaufen(ctx context.Context, params *GetMittelAbgelaufenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMittelAbgelaufenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMittelAbpackung(ctx context.Context, params *GetMittelAbpackungParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMittelAbpackungRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMittelGefahrenSymbol(ctx context.Context, params *GetMittelGefahrenSymbolParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMittelGefahrenSymbolRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMittelVertrieb(ctx context.Context, params *GetMittelVertriebParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMittelVertriebRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMittelWirkbereich(ctx context.Context, params *GetMittelWirkbereichParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMittelWirkbereichRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetParallelimportAbgelaufen(ctx context.Context, params *GetParallelimportAbgelaufenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetParallelimportAbgelaufenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetParallelimportGueltig(ctx context.Context, params *GetParallelimportGueltigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetParallelimportGueltigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchadorgGruppe(ctx context.Context, params *GetSchadorgGruppeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchadorgGruppeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaerkung(ctx context.Context, params *GetStaerkungParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaerkungRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaerkungVertrieb(ctx context.Context, params *GetStaerkungVertriebParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaerkungVertriebRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStand(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStandRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWirkstoff(ctx context.Context, params *GetWirkstoffParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWirkstoffRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWirkstoffGehalt(ctx context.Context, params *GetWirkstoffGehaltParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWirkstoffGehaltRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZusatzstoff(ctx context.Context, params *GetZusatzstoffParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZusatzstoffRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZusatzstoffVertrieb(ctx context.Context, params *GetZusatzstoffVertriebParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZusatzstoffVertriebRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdresseRequest generates requests for GetAdresse
func NewGetAdresseRequest(server string, params *GetAdresseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/adresse/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AdresseNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "adresse_nr", runtime.ParamLocationQuery, *params.AdresseNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAntragRequest generates requests for GetAntrag
func NewGetAntragRequest(server string, params *GetAntragParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/antrag/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Antragnr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "antragnr", runtime.ParamLocationQuery, *params.Antragnr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AntragstellerNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "antragsteller_nr", runtime.ParamLocationQuery, *params.AntragstellerNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuflageReduRequest generates requests for GetAuflageRedu
func NewGetAuflageReduRequest(server string, params *GetAuflageReduParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auflage_redu/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Auflagenr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "auflagenr", runtime.ParamLocationQuery, *params.Auflagenr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuflagenRequest generates requests for GetAuflagen
func NewGetAuflagenRequest(server string, params *GetAuflagenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auflagen/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Auflage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "auflage", runtime.ParamLocationQuery, *params.Auflage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Auflagenr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "auflagenr", runtime.ParamLocationQuery, *params.Auflagenr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ebene != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ebene", runtime.ParamLocationQuery, *params.Ebene); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgRequest generates requests for GetAwg
func NewGetAwgRequest(server string, params *GetAwgParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgAufwandRequest generates requests for GetAwgAufwand
func NewGetAwgAufwandRequest(server string, params *GetAwgAufwandParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_aufwand/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgBemRequest generates requests for GetAwgBem
func NewGetAwgBemRequest(server string, params *GetAwgBemParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_bem/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgKulturRequest generates requests for GetAwgKultur
func NewGetAwgKulturRequest(server string, params *GetAwgKulturParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_kultur/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgPartnerRequest generates requests for GetAwgPartner
func NewGetAwgPartnerRequest(server string, params *GetAwgPartnerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_partner/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgPartnerAufwandRequest generates requests for GetAwgPartnerAufwand
func NewGetAwgPartnerAufwandRequest(server string, params *GetAwgPartnerAufwandParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_partner_aufwand/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgSchadorgRequest generates requests for GetAwgSchadorg
func NewGetAwgSchadorgRequest(server string, params *GetAwgSchadorgParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_schadorg/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgVerwendungszweckRequest generates requests for GetAwgVerwendungszweck
func NewGetAwgVerwendungszweckRequest(server string, params *GetAwgVerwendungszweckParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_verwendungszweck/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgWartezeitRequest generates requests for GetAwgWartezeit
func NewGetAwgWartezeitRequest(server string, params *GetAwgWartezeitParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_wartezeit/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AwgWartezeitNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_wartezeit_nr", runtime.ParamLocationQuery, *params.AwgWartezeitNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kultur != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kultur", runtime.ParamLocationQuery, *params.Kultur); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgWartezeitAusgKulturRequest generates requests for GetAwgWartezeitAusgKultur
func NewGetAwgWartezeitAusgKulturRequest(server string, params *GetAwgWartezeitAusgKulturParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_wartezeit_ausg_kultur/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgWartezeitNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_wartezeit_nr", runtime.ParamLocationQuery, *params.AwgWartezeitNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kultur != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kultur", runtime.ParamLocationQuery, *params.Kultur); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgZeitpunktRequest generates requests for GetAwgZeitpunkt
func NewGetAwgZeitpunktRequest(server string, params *GetAwgZeitpunktParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_zeitpunkt/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAwgZulassungRequest generates requests for GetAwgZulassung
func NewGetAwgZulassungRequest(server string, params *GetAwgZulassungParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/awg_zulassung/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AwgId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "awg_id", runtime.ParamLocationQuery, *params.AwgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGhsGefahrenhinweiseRequest generates requests for GetGhsGefahrenhinweise
func NewGetGhsGefahrenhinweiseRequest(server string, params *GetGhsGefahrenhinweiseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ghs_gefahrenhinweise/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGhsGefahrensymboleRequest generates requests for GetGhsGefahrensymbole
func NewGetGhsGefahrensymboleRequest(server string, params *GetGhsGefahrensymboleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ghs_gefahrensymbole/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGhsSicherheitshinweiseRequest generates requests for GetGhsSicherheitshinweise
func NewGetGhsSicherheitshinweiseRequest(server string, params *GetGhsSicherheitshinweiseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ghs_sicherheitshinweise/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGhsSignalwoerterRequest generates requests for GetGhsSignalwoerter
func NewGetGhsSignalwoerterRequest(server string, params *GetGhsSignalwoerterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ghs_signalwoerter/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHinweisRequest generates requests for GetHinweis
func NewGetHinweisRequest(server string, params *GetHinweisParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hinweis/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Ebene != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ebene", runtime.ParamLocationQuery, *params.Ebene); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKodeRequest generates requests for GetKode
func NewGetKodeRequest(server string, params *GetKodeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kode/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kode", runtime.ParamLocationQuery, *params.Kode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kodeliste != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kodeliste", runtime.ParamLocationQuery, *params.Kodeliste); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sprache != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sprache", runtime.ParamLocationQuery, *params.Sprache); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKodelisteRequest generates requests for GetKodeliste
func NewGetKodelisteRequest(server string, params *GetKodelisteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kodeliste/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kodeliste != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kodeliste", runtime.ParamLocationQuery, *params.Kodeliste); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKodelisteFeldnameRequest generates requests for GetKodelisteFeldname
func NewGetKodelisteFeldnameRequest(server string, params *GetKodelisteFeldnameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kodeliste_feldname/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Feldname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feldname", runtime.ParamLocationQuery, *params.Feldname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kodeliste != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kodeliste", runtime.ParamLocationQuery, *params.Kodeliste); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tabelle != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tabelle", runtime.ParamLocationQuery, *params.Tabelle); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetKulturGruppeRequest generates requests for GetKulturGruppe
func NewGetKulturGruppeRequest(server string, params *GetKulturGruppeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kultur_gruppe/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kultur != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kultur", runtime.ParamLocationQuery, *params.Kultur); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KulturGruppe != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kultur_gruppe", runtime.ParamLocationQuery, *params.KulturGruppe); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMittelRequest generates requests for GetMittel
func NewGetMittelRequest(server string, params *GetMittelParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mittel/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMittelAbgelaufenRequest generates requests for GetMittelAbgelaufen
func NewGetMittelAbgelaufenRequest(server string, params *GetMittelAbgelaufenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mittel_abgelaufen/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMittelAbpackungRequest generates requests for GetMittelAbpackung
func NewGetMittelAbpackungRequest(server string, params *GetMittelAbpackungParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mittel_abpackung/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMittelGefahrenSymbolRequest generates requests for GetMittelGefahrenSymbol
func NewGetMittelGefahrenSymbolRequest(server string, params *GetMittelGefahrenSymbolParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mittel_gefahren_symbol/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMittelVertriebRequest generates requests for GetMittelVertrieb
func NewGetMittelVertriebRequest(server string, params *GetMittelVertriebParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mittel_vertrieb/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VertriebsfirmaNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vertriebsfirma_nr", runtime.ParamLocationQuery, *params.VertriebsfirmaNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMittelWirkbereichRequest generates requests for GetMittelWirkbereich
func NewGetMittelWirkbereichRequest(server string, params *GetMittelWirkbereichParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mittel_wirkbereich/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Wirkungsbereich != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wirkungsbereich", runtime.ParamLocationQuery, *params.Wirkungsbereich); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetParallelimportAbgelaufenRequest generates requests for GetParallelimportAbgelaufen
func NewGetParallelimportAbgelaufenRequest(server string, params *GetParallelimportAbgelaufenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/parallelimport_abgelaufen/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ImporteurNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "importeur_nr", runtime.ParamLocationQuery, *params.ImporteurNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PiReferenzKennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pi_referenz_kennr", runtime.ParamLocationQuery, *params.PiReferenzKennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetParallelimportGueltigRequest generates requests for GetParallelimportGueltig
func NewGetParallelimportGueltigRequest(server string, params *GetParallelimportGueltigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/parallelimport_gueltig/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ImporteurNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "importeur_nr", runtime.ParamLocationQuery, *params.ImporteurNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PiReferenzKennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pi_referenz_kennr", runtime.ParamLocationQuery, *params.PiReferenzKennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchadorgGruppeRequest generates requests for GetSchadorgGruppe
func NewGetSchadorgGruppeRequest(server string, params *GetSchadorgGruppeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schadorg_gruppe/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Schadorg != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schadorg", runtime.ParamLocationQuery, *params.Schadorg); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SchadorgGruppe != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "schadorg_gruppe", runtime.ParamLocationQuery, *params.SchadorgGruppe); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaerkungRequest generates requests for GetStaerkung
func NewGetStaerkungRequest(server string, params *GetStaerkungParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staerkung/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AntragstellerNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "antragsteller_nr", runtime.ParamLocationQuery, *params.AntragstellerNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaerkungVertriebRequest generates requests for GetStaerkungVertrieb
func NewGetStaerkungVertriebRequest(server string, params *GetStaerkungVertriebParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/staerkung_vertrieb/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VertriebsfirmaNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vertriebsfirma_nr", runtime.ParamLocationQuery, *params.VertriebsfirmaNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStandRequest generates requests for GetStand
func NewGetStandRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stand/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWirkstoffRequest generates requests for GetWirkstoff
func NewGetWirkstoffRequest(server string, params *GetWirkstoffParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wirkstoff/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Wirknr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wirknr", runtime.ParamLocationQuery, *params.Wirknr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWirkstoffGehaltRequest generates requests for GetWirkstoffGehalt
func NewGetWirkstoffGehaltRequest(server string, params *GetWirkstoffGehaltParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wirkstoff_gehalt/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Wirknr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wirknr", runtime.ParamLocationQuery, *params.Wirknr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZusatzstoffRequest generates requests for GetZusatzstoff
func NewGetZusatzstoffRequest(server string, params *GetZusatzstoffParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zusatzstoff/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AntragstellerNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "antragsteller_nr", runtime.ParamLocationQuery, *params.AntragstellerNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZusatzstoffVertriebRequest generates requests for GetZusatzstoffVertrieb
func NewGetZusatzstoffVertriebRequest(server string, params *GetZusatzstoffVertriebParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zusatzstoff_vertrieb/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Kennr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kennr", runtime.ParamLocationQuery, *params.Kennr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VertriebsfirmaNr != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vertriebsfirma_nr", runtime.ParamLocationQuery, *params.VertriebsfirmaNr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdresse request
	GetAdresseWithResponse(ctx context.Context, params *GetAdresseParams, reqEditors ...RequestEditorFn) (*GetAdresseResponse, error)

	// GetAntrag request
	GetAntragWithResponse(ctx context.Context, params *GetAntragParams, reqEditors ...RequestEditorFn) (*GetAntragResponse, error)

	// GetAuflageRedu request
	GetAuflageReduWithResponse(ctx context.Context, params *GetAuflageReduParams, reqEditors ...RequestEditorFn) (*GetAuflageReduResponse, error)

	// GetAuflagen request
	GetAuflagenWithResponse(ctx context.Context, params *GetAuflagenParams, reqEditors ...RequestEditorFn) (*GetAuflagenResponse, error)

	// GetAwg request
	GetAwgWithResponse(ctx context.Context, params *GetAwgParams, reqEditors ...RequestEditorFn) (*GetAwgResponse, error)

	// GetAwgAufwand request
	GetAwgAufwandWithResponse(ctx context.Context, params *GetAwgAufwandParams, reqEditors ...RequestEditorFn) (*GetAwgAufwandResponse, error)

	// GetAwgBem request
	GetAwgBemWithResponse(ctx context.Context, params *GetAwgBemParams, reqEditors ...RequestEditorFn) (*GetAwgBemResponse, error)

	// GetAwgKultur request
	GetAwgKulturWithResponse(ctx context.Context, params *GetAwgKulturParams, reqEditors ...RequestEditorFn) (*GetAwgKulturResponse, error)

	// GetAwgPartner request
	GetAwgPartnerWithResponse(ctx context.Context, params *GetAwgPartnerParams, reqEditors ...RequestEditorFn) (*GetAwgPartnerResponse, error)

	// GetAwgPartnerAufwand request
	GetAwgPartnerAufwandWithResponse(ctx context.Context, params *GetAwgPartnerAufwandParams, reqEditors ...RequestEditorFn) (*GetAwgPartnerAufwandResponse, error)

	// GetAwgSchadorg request
	GetAwgSchadorgWithResponse(ctx context.Context, params *GetAwgSchadorgParams, reqEditors ...RequestEditorFn) (*GetAwgSchadorgResponse, error)

	// GetAwgVerwendungszweck request
	GetAwgVerwendungszweckWithResponse(ctx context.Context, params *GetAwgVerwendungszweckParams, reqEditors ...RequestEditorFn) (*GetAwgVerwendungszweckResponse, error)

	// GetAwgWartezeit request
	GetAwgWartezeitWithResponse(ctx context.Context, params *GetAwgWartezeitParams, reqEditors ...RequestEditorFn) (*GetAwgWartezeitResponse, error)

	// GetAwgWartezeitAusgKultur request
	GetAwgWartezeitAusgKulturWithResponse(ctx context.Context, params *GetAwgWartezeitAusgKulturParams, reqEditors ...RequestEditorFn) (*GetAwgWartezeitAusgKulturResponse, error)

	// GetAwgZeitpunkt request
	GetAwgZeitpunktWithResponse(ctx context.Context, params *GetAwgZeitpunktParams, reqEditors ...RequestEditorFn) (*GetAwgZeitpunktResponse, error)

	// GetAwgZulassung request
	GetAwgZulassungWithResponse(ctx context.Context, params *GetAwgZulassungParams, reqEditors ...RequestEditorFn) (*GetAwgZulassungResponse, error)

	// GetGhsGefahrenhinweise request
	GetGhsGefahrenhinweiseWithResponse(ctx context.Context, params *GetGhsGefahrenhinweiseParams, reqEditors ...RequestEditorFn) (*GetGhsGefahrenhinweiseResponse, error)

	// GetGhsGefahrensymbole request
	GetGhsGefahrensymboleWithResponse(ctx context.Context, params *GetGhsGefahrensymboleParams, reqEditors ...RequestEditorFn) (*GetGhsGefahrensymboleResponse, error)

	// GetGhsSicherheitshinweise request
	GetGhsSicherheitshinweiseWithResponse(ctx context.Context, params *GetGhsSicherheitshinweiseParams, reqEditors ...RequestEditorFn) (*GetGhsSicherheitshinweiseResponse, error)

	// GetGhsSignalwoerter request
	GetGhsSignalwoerterWithResponse(ctx context.Context, params *GetGhsSignalwoerterParams, reqEditors ...RequestEditorFn) (*GetGhsSignalwoerterResponse, error)

	// GetHinweis request
	GetHinweisWithResponse(ctx context.Context, params *GetHinweisParams, reqEditors ...RequestEditorFn) (*GetHinweisResponse, error)

	// GetKode request
	GetKodeWithResponse(ctx context.Context, params *GetKodeParams, reqEditors ...RequestEditorFn) (*GetKodeResponse, error)

	// GetKodeliste request
	GetKodelisteWithResponse(ctx context.Context, params *GetKodelisteParams, reqEditors ...RequestEditorFn) (*GetKodelisteResponse, error)

	// GetKodelisteFeldname request
	GetKodelisteFeldnameWithResponse(ctx context.Context, params *GetKodelisteFeldnameParams, reqEditors ...RequestEditorFn) (*GetKodelisteFeldnameResponse, error)

	// GetKulturGruppe request
	GetKulturGruppeWithResponse(ctx context.Context, params *GetKulturGruppeParams, reqEditors ...RequestEditorFn) (*GetKulturGruppeResponse, error)

	// GetMittel request
	GetMittelWithResponse(ctx context.Context, params *GetMittelParams, reqEditors ...RequestEditorFn) (*GetMittelResponse, error)

	// GetMittelAbgelaufen request
	GetMittelAbgelaufenWithResponse(ctx context.Context, params *GetMittelAbgelaufenParams, reqEditors ...RequestEditorFn) (*GetMittelAbgelaufenResponse, error)

	// GetMittelAbpackung request
	GetMittelAbpackungWithResponse(ctx context.Context, params *GetMittelAbpackungParams, reqEditors ...RequestEditorFn) (*GetMittelAbpackungResponse, error)

	// GetMittelGefahrenSymbol request
	GetMittelGefahrenSymbolWithResponse(ctx context.Context, params *GetMittelGefahrenSymbolParams, reqEditors ...RequestEditorFn) (*GetMittelGefahrenSymbolResponse, error)

	// GetMittelVertrieb request
	GetMittelVertriebWithResponse(ctx context.Context, params *GetMittelVertriebParams, reqEditors ...RequestEditorFn) (*GetMittelVertriebResponse, error)

	// GetMittelWirkbereich request
	GetMittelWirkbereichWithResponse(ctx context.Context, params *GetMittelWirkbereichParams, reqEditors ...RequestEditorFn) (*GetMittelWirkbereichResponse, error)

	// GetParallelimportAbgelaufen request
	GetParallelimportAbgelaufenWithResponse(ctx context.Context, params *GetParallelimportAbgelaufenParams, reqEditors ...RequestEditorFn) (*GetParallelimportAbgelaufenResponse, error)

	// GetParallelimportGueltig request
	GetParallelimportGueltigWithResponse(ctx context.Context, params *GetParallelimportGueltigParams, reqEditors ...RequestEditorFn) (*GetParallelimportGueltigResponse, error)

	// GetSchadorgGruppe request
	GetSchadorgGruppeWithResponse(ctx context.Context, params *GetSchadorgGruppeParams, reqEditors ...RequestEditorFn) (*GetSchadorgGruppeResponse, error)

	// GetStaerkung request
	GetStaerkungWithResponse(ctx context.Context, params *GetStaerkungParams, reqEditors ...RequestEditorFn) (*GetStaerkungResponse, error)

	// GetStaerkungVertrieb request
	GetStaerkungVertriebWithResponse(ctx context.Context, params *GetStaerkungVertriebParams, reqEditors ...RequestEditorFn) (*GetStaerkungVertriebResponse, error)

	// GetStand request
	GetStandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStandResponse, error)

	// GetWirkstoff request
	GetWirkstoffWithResponse(ctx context.Context, params *GetWirkstoffParams, reqEditors ...RequestEditorFn) (*GetWirkstoffResponse, error)

	// GetWirkstoffGehalt request
	GetWirkstoffGehaltWithResponse(ctx context.Context, params *GetWirkstoffGehaltParams, reqEditors ...RequestEditorFn) (*GetWirkstoffGehaltResponse, error)

	// GetZusatzstoff request
	GetZusatzstoffWithResponse(ctx context.Context, params *GetZusatzstoffParams, reqEditors ...RequestEditorFn) (*GetZusatzstoffResponse, error)

	// GetZusatzstoffVertrieb request
	GetZusatzstoffVertriebWithResponse(ctx context.Context, params *GetZusatzstoffVertriebParams, reqEditors ...RequestEditorFn) (*GetZusatzstoffVertriebResponse, error)
}

type GetAdresseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			ADRESSENR       *NUMBER   `json:"ADRESSE_NR,omitempty"`
			ANSCHRIFT1      *VARCHAR2 `json:"ANSCHRIFT_1,omitempty"`
			ANSCHRIFT2      *VARCHAR2 `json:"ANSCHRIFT_2,omitempty"`
			ANSCHRIFT3      *VARCHAR2 `json:"ANSCHRIFT_3,omitempty"`
			ANSCHRIFT4      *VARCHAR2 `json:"ANSCHRIFT_4,omitempty"`
			ANSCHRIFT5      *VARCHAR2 `json:"ANSCHRIFT_5,omitempty"`
			ANSCHRIFT6      *VARCHAR2 `json:"ANSCHRIFT_6,omitempty"`
			ANSPRECHPARTNER *VARCHAR2 `json:"ANSPRECHPARTNER,omitempty"`
			EMAIL           *VARCHAR2 `json:"E_MAIL,omitempty"`
			FAX             *VARCHAR2 `json:"FAX,omitempty"`
			FIRMA           *VARCHAR2 `json:"FIRMA,omitempty"`
			FIRMENNAME      *VARCHAR2 `json:"FIRMENNAME,omitempty"`
			LAND            *VARCHAR2 `json:"LAND,omitempty"`
			TELEFON         *VARCHAR2 `json:"TELEFON,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdresseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdresseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAntragResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			ANTRAGNR        *VARCHAR2 `json:"ANTRAGNR,omitempty"`
			ANTRAGSTELLER   *VARCHAR2 `json:"ANTRAGSTELLER,omitempty"`
			ANTRAGSTELLERNR *NUMBER   `json:"ANTRAGSTELLER_NR,omitempty"`
			KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAntragResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAntragResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuflageReduResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AUFLAGENR   *NUMBER   `json:"AUFLAGENR,omitempty"`
			KATEGORIE   *VARCHAR2 `json:"KATEGORIE,omitempty"`
			MROW        *VARCHAR2 `json:"M_ROW$$,omitempty"`
			REDUABSTAND *VARCHAR2 `json:"REDU_ABSTAND,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAuflageReduResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuflageReduResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuflagenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			ABSTAND           *NUMBER   `json:"ABSTAND,omitempty"`
			ANWENDBEST        *CHAR     `json:"ANWENDBEST,omitempty"`
			ANWENDUNGSTECHNIK *VARCHAR2 `json:"ANWENDUNGSTECHNIK,omitempty"`
			AUFLAGE           *VARCHAR2 `json:"AUFLAGE,omitempty"`
			AUFLAGENR         *NUMBER   `json:"AUFLAGENR,omitempty"`
			EBENE             *VARCHAR2 `json:"EBENE,omitempty"`
			KULTUR            *VARCHAR2 `json:"KULTUR,omitempty"`
			MROW              *VARCHAR2 `json:"M_ROW$$,omitempty"`
			REDUABSTAND       *VARCHAR2 `json:"REDU_ABSTAND,omitempty"`
			WEITEREBEDINGUNG  *VARCHAR2 `json:"WEITERE_BEDINGUNG,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAuflagenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuflagenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			ANTRAGNR                   *VARCHAR2 `json:"ANTRAGNR,omitempty"`
			ANWENDUNGENANZJEBEFALL     *NUMBER   `json:"ANWENDUNGEN_ANZ_JE_BEFALL,omitempty"`
			ANWENDUNGENMAXJEKULTUR     *NUMBER   `json:"ANWENDUNGEN_MAX_JE_KULTUR,omitempty"`
			ANWENDUNGENMAXJEVEGETATION *NUMBER   `json:"ANWENDUNGEN_MAX_JE_VEGETATION,omitempty"`
			ANWENDUNGSBEREICH          *VARCHAR2 `json:"ANWENDUNGSBEREICH,omitempty"`
			ANWENDUNGSTECHNIK          *VARCHAR2 `json:"ANWENDUNGSTECHNIK,omitempty"`
			AWGNR                      *VARCHAR2 `json:"AWGNR,omitempty"`
			AWGID                      *VARCHAR2 `json:"AWG_ID,omitempty"`
			AWABSTANDBIS               *NUMBER   `json:"AW_ABSTAND_BIS,omitempty"`
			AWABSTANDEINHEIT           *VARCHAR2 `json:"AW_ABSTAND_EINHEIT,omitempty"`
			AWABSTANDVON               *NUMBER   `json:"AW_ABSTAND_VON,omitempty"`
			EINSATZGEBIET              *VARCHAR2 `json:"EINSATZGEBIET,omitempty"`
			GENEHMIGUNG                *CHAR     `json:"GENEHMIGUNG,omitempty"`
			HUK                        *CHAR     `json:"HUK,omitempty"`
			KENNR                      *VARCHAR2 `json:"KENNR,omitempty"`
			KULTURERL                  *VARCHAR2 `json:"KULTUR_ERL,omitempty"`
			MROW                       *VARCHAR2 `json:"M_ROW$$,omitempty"`
			SCHADORGERL                *VARCHAR2 `json:"SCHADORG_ERL,omitempty"`
			STADIUMKULTURBEM           *VARCHAR2 `json:"STADIUM_KULTUR_BEM,omitempty"`
			STADIUMKULTURBIS           *VARCHAR2 `json:"STADIUM_KULTUR_BIS,omitempty"`
			STADIUMKULTURKODELISTE     *NUMBER   `json:"STADIUM_KULTUR_KODELISTE,omitempty"`
			STADIUMKULTURVON           *VARCHAR2 `json:"STADIUM_KULTUR_VON,omitempty"`
			STADIUMSCHADORGBEM         *VARCHAR2 `json:"STADIUM_SCHADORG_BEM,omitempty"`
			STADIUMSCHADORGBIS         *VARCHAR2 `json:"STADIUM_SCHADORG_BIS,omitempty"`
			STADIUMSCHADORGKODELISTE   *NUMBER   `json:"STADIUM_SCHADORG_KODELISTE,omitempty"`
			STADIUMSCHADORGVON         *VARCHAR2 `json:"STADIUM_SCHADORG_VON,omitempty"`
			WIRKUNGSBEREICH            *VARCHAR2 `json:"WIRKUNGSBEREICH,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgAufwandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AUFWANDBEDINGUNG *VARCHAR2 `json:"AUFWANDBEDINGUNG,omitempty"`
			AWGID            *VARCHAR2 `json:"AWG_ID,omitempty"`
			MAUFWAND         *NUMBER   `json:"M_AUFWAND,omitempty"`
			MAUFWANDEINHEIT  *VARCHAR2 `json:"M_AUFWAND_EINHEIT,omitempty"`
			MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
			SORTIERNR        *NUMBER   `json:"SORTIER_NR,omitempty"`
			WAUFWANDBIS      *NUMBER   `json:"W_AUFWAND_BIS,omitempty"`
			WAUFWANDEINHEIT  *VARCHAR2 `json:"W_AUFWAND_EINHEIT,omitempty"`
			WAUFWANDVON      *NUMBER   `json:"W_AUFWAND_VON,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgAufwandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgAufwandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgBemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AUFLAGEBEM     *VARCHAR2 `json:"AUFLAGE_BEM,omitempty"`
			AUFLAGEBEREICH *CHAR     `json:"AUFLAGE_BEREICH,omitempty"`
			AWGID          *VARCHAR2 `json:"AWG_ID,omitempty"`
			MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgBemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgBemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgKulturResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AUSGENOMMEN *CHAR     `json:"AUSGENOMMEN,omitempty"`
			AWGID       *VARCHAR2 `json:"AWG_ID,omitempty"`
			KULTUR      *VARCHAR2 `json:"KULTUR,omitempty"`
			MROW        *VARCHAR2 `json:"M_ROW$$,omitempty"`
			SORTIERNR   *NUMBER   `json:"SORTIER_NR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgKulturResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgKulturResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgPartnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AWGID        *VARCHAR2 `json:"AWG_ID,omitempty"`
			MISCHUNGART  *VARCHAR2 `json:"MISCHUNG_ART,omitempty"`
			MROW         *VARCHAR2 `json:"M_ROW$$,omitempty"`
			PARTNERKENNR *VARCHAR2 `json:"PARTNER_KENNR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgPartnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgPartnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgPartnerAufwandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AUFWANDBEDINGUNG *VARCHAR2 `json:"AUFWANDBEDINGUNG,omitempty"`
			AWGID            *VARCHAR2 `json:"AWG_ID,omitempty"`
			MAUFWAND         *NUMBER   `json:"M_AUFWAND,omitempty"`
			MAUFWANDEINHEIT  *VARCHAR2 `json:"M_AUFWAND_EINHEIT,omitempty"`
			MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
			PARTNERKENNR     *VARCHAR2 `json:"PARTNER_KENNR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgPartnerAufwandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgPartnerAufwandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgSchadorgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AUSGENOMMEN *CHAR     `json:"AUSGENOMMEN,omitempty"`
			AWGID       *VARCHAR2 `json:"AWG_ID,omitempty"`
			MROW        *VARCHAR2 `json:"M_ROW$$,omitempty"`
			SCHADORG    *VARCHAR2 `json:"SCHADORG,omitempty"`
			SORTIERNR   *NUMBER   `json:"SORTIER_NR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgSchadorgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgSchadorgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgVerwendungszweckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AWGID            *VARCHAR2 `json:"AWG_ID,omitempty"`
			MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
			VERWENDUNGSZWECK *VARCHAR2 `json:"VERWENDUNGSZWECK,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgVerwendungszweckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgVerwendungszweckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgWartezeitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			ANWENDUNGSBEREICH   *VARCHAR2 `json:"ANWENDUNGSBEREICH,omitempty"`
			AWGID               *VARCHAR2 `json:"AWG_ID,omitempty"`
			AWGWARTEZEITNR      *NUMBER   `json:"AWG_WARTEZEIT_NR,omitempty"`
			ERLAEUTERUNG        *VARCHAR2 `json:"ERLAEUTERUNG,omitempty"`
			GESETZTWARTEZEIT    *NUMBER   `json:"GESETZT_WARTEZEIT,omitempty"`
			GESETZTWARTEZEITBEM *VARCHAR2 `json:"GESETZT_WARTEZEIT_BEM,omitempty"`
			KULTUR              *VARCHAR2 `json:"KULTUR,omitempty"`
			MROW                *VARCHAR2 `json:"M_ROW$$,omitempty"`
			SORTIERNR           *NUMBER   `json:"SORTIER_NR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgWartezeitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgWartezeitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgWartezeitAusgKulturResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AWGWARTEZEITNR *NUMBER   `json:"AWG_WARTEZEIT_NR,omitempty"`
			KULTUR         *VARCHAR2 `json:"KULTUR,omitempty"`
			MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgWartezeitAusgKulturResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgWartezeitAusgKulturResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgZeitpunktResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AWGID           *VARCHAR2 `json:"AWG_ID,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			OPERANDZUVORHER *VARCHAR2 `json:"OPERAND_ZU_VORHER,omitempty"`
			SORTIERNR       *NUMBER   `json:"SORTIER_NR,omitempty"`
			ZEITPUNKT       *VARCHAR2 `json:"ZEITPUNKT,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgZeitpunktResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgZeitpunktResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAwgZulassungResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AWGID   *VARCHAR2 `json:"AWG_ID,omitempty"`
			MROW    *VARCHAR2 `json:"M_ROW$$,omitempty"`
			ZULENDE *DATE     `json:"ZUL_ENDE,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAwgZulassungResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAwgZulassungResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGhsGefahrenhinweiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			GEFAHRENHINWEIS *VARCHAR2 `json:"GEFAHRENHINWEIS,omitempty"`
			KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGhsGefahrenhinweiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGhsGefahrenhinweiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGhsGefahrensymboleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			GEFAHRENSYMBOL *VARCHAR2 `json:"GEFAHRENSYMBOL,omitempty"`
			KENNR          *VARCHAR2 `json:"KENNR,omitempty"`
			MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGhsGefahrensymboleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGhsGefahrensymboleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGhsSicherheitshinweiseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KENNR              *VARCHAR2 `json:"KENNR,omitempty"`
			MROW               *VARCHAR2 `json:"M_ROW$$,omitempty"`
			SICHERHEITSHINWEIS *VARCHAR2 `json:"SICHERHEITSHINWEIS,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGhsSicherheitshinweiseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGhsSicherheitshinweiseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGhsSignalwoerterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KENNR      *VARCHAR2 `json:"KENNR,omitempty"`
			MROW       *VARCHAR2 `json:"M_ROW$$,omitempty"`
			SIGNALWORT *VARCHAR2 `json:"SIGNALWORT,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGhsSignalwoerterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGhsSignalwoerterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHinweisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			EBENE   *VARCHAR2 `json:"EBENE,omitempty"`
			HINWEIS *VARCHAR2 `json:"HINWEIS,omitempty"`
			MROW    *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHinweisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHinweisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KODE      *VARCHAR2 `json:"KODE,omitempty"`
			KODELISTE *NUMBER   `json:"KODELISTE,omitempty"`
			KODETEXT  *VARCHAR2 `json:"KODETEXT,omitempty"`
			SPERRE    *CHAR     `json:"SPERRE,omitempty"`
			SPRACHE   *VARCHAR2 `json:"SPRACHE,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetKodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKodelisteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KODELISTE  *NUMBER   `json:"KODELISTE,omitempty"`
			LISTENNAME *VARCHAR2 `json:"LISTENNAME,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetKodelisteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKodelisteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKodelisteFeldnameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			FELDNAME  *VARCHAR2 `json:"FELDNAME,omitempty"`
			KODELISTE *NUMBER   `json:"KODELISTE,omitempty"`
			TABELLE   *VARCHAR2 `json:"TABELLE,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetKodelisteFeldnameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKodelisteFeldnameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKulturGruppeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KULTUR       *VARCHAR2 `json:"KULTUR,omitempty"`
			KULTURGRUPPE *VARCHAR2 `json:"KULTUR_GRUPPE,omitempty"`
			MROW         *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetKulturGruppeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKulturGruppeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMittelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			FORMULIERUNGART *VARCHAR2 `json:"FORMULIERUNG_ART,omitempty"`
			KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
			MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			ZULENDE         *DATE     `json:"ZUL_ENDE,omitempty"`
			ZULERSTMALIGAM  *DATE     `json:"ZUL_ERSTMALIG_AM,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMittelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMittelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMittelAbgelaufenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			AUFBRAUCHFRIST  *DATE     `json:"AUFBRAUCHFRIST,omitempty"`
			FORMULIERUNGART *VARCHAR2 `json:"FORMULIERUNG_ART,omitempty"`
			KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
			MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			STATUS          *VARCHAR2 `json:"STATUS,omitempty"`
			ZULENDE         *DATE     `json:"ZUL_ENDE,omitempty"`
			ZULERSTMALIGAM  *DATE     `json:"ZUL_ERSTMALIG_AM,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMittelAbgelaufenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMittelAbgelaufenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMittelAbpackungResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			ANZAHL                  *VARCHAR2 `json:"ANZAHL,omitempty"`
			INHALTEINHEIT           *VARCHAR2 `json:"INHALT_EINHEIT,omitempty"`
			KENNR                   *VARCHAR2 `json:"KENNR,omitempty"`
			MENGE                   *VARCHAR2 `json:"MENGE,omitempty"`
			MROW                    *VARCHAR2 `json:"M_ROW$$,omitempty"`
			NICHTBERUFLICHEANWENDER *CHAR     `json:"NICHTBERUFLICHE_ANWENDER,omitempty"`
			VERPACKUNGSART          *VARCHAR2 `json:"VERPACKUNGSART,omitempty"`
			VERPACKUNGSMATERIAL     *VARCHAR2 `json:"VERPACKUNGSMATERIAL,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMittelAbpackungResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMittelAbpackungResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMittelGefahrenSymbolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			GEFAHRENSYMBOL *VARCHAR2 `json:"GEFAHREN_SYMBOL,omitempty"`
			KENNR          *VARCHAR2 `json:"KENNR,omitempty"`
			MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMittelGefahrenSymbolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMittelGefahrenSymbolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMittelVertriebResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KENNR            *VARCHAR2 `json:"KENNR,omitempty"`
			MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
			VERTRIEBSFIRMA   *VARCHAR2 `json:"VERTRIEBSFIRMA,omitempty"`
			VERTRIEBSFIRMANR *NUMBER   `json:"VERTRIEBSFIRMA_NR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMittelVertriebResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMittelVertriebResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMittelWirkbereichResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			WIRKUNGSBEREICH *VARCHAR2 `json:"WIRKUNGSBEREICH,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMittelWirkbereichResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMittelWirkbereichResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetParallelimportAbgelaufenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			BESCHEIDDATUM   *DATE     `json:"BESCHEID_DATUM,omitempty"`
			BESCHEINIGUNG   *CHAR     `json:"BESCHEINIGUNG,omitempty"`
			GUELTIG         *DATE     `json:"GUELTIG,omitempty"`
			IMPORTEUR       *VARCHAR2 `json:"IMPORTEUR,omitempty"`
			IMPORTEURNR     *NUMBER   `json:"IMPORTEUR_NR,omitempty"`
			IMPORTEURTXT    *VARCHAR2 `json:"IMPORTEUR_TXT,omitempty"`
			MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			PIBESCHEIDNR    *VARCHAR2 `json:"PI_BESCHEIDNR,omitempty"`
			PIKENNZIFFER    *VARCHAR2 `json:"PI_KENNZIFFER,omitempty"`
			PIMITTELNAME    *VARCHAR2 `json:"PI_MITTELNAME,omitempty"`
			PIPSMNR         *VARCHAR2 `json:"PI_PSMNR,omitempty"`
			PIREFERENZKENNR *VARCHAR2 `json:"PI_REFERENZ_KENNR,omitempty"`
			PISTATUS        *VARCHAR2 `json:"PI_STATUS,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetParallelimportAbgelaufenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetParallelimportAbgelaufenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetParallelimportGueltigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			BESCHEIDDATUM   *DATE     `json:"BESCHEID_DATUM,omitempty"`
			BESCHEINIGUNG   *CHAR     `json:"BESCHEINIGUNG,omitempty"`
			GUELTIG         *DATE     `json:"GUELTIG,omitempty"`
			IMPORTEUR       *VARCHAR2 `json:"IMPORTEUR,omitempty"`
			IMPORTEURNR     *NUMBER   `json:"IMPORTEUR_NR,omitempty"`
			IMPORTEURTXT    *VARCHAR2 `json:"IMPORTEUR_TXT,omitempty"`
			MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			PIBESCHEIDNR    *VARCHAR2 `json:"PI_BESCHEIDNR,omitempty"`
			PIKENNZIFFER    *VARCHAR2 `json:"PI_KENNZIFFER,omitempty"`
			PIMITTELNAME    *VARCHAR2 `json:"PI_MITTELNAME,omitempty"`
			PIPSMNR         *VARCHAR2 `json:"PI_PSMNR,omitempty"`
			PIREFERENZKENNR *VARCHAR2 `json:"PI_REFERENZ_KENNR,omitempty"`
			PISTATUS        *VARCHAR2 `json:"PI_STATUS,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetParallelimportGueltigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetParallelimportGueltigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchadorgGruppeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
			SCHADORG       *VARCHAR2 `json:"SCHADORG,omitempty"`
			SCHADORGGRUPPE *VARCHAR2 `json:"SCHADORG_GRUPPE,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSchadorgGruppeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchadorgGruppeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaerkungResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			ANTRAGSTELLER   *VARCHAR2 `json:"ANTRAGSTELLER,omitempty"`
			ANTRAGSTELLERNR *NUMBER   `json:"ANTRAGSTELLER_NR,omitempty"`
			GENEHMIGUNGAM   *DATE     `json:"GENEHMIGUNG_AM,omitempty"`
			KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
			MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStaerkungResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaerkungResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaerkungVertriebResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KENNR            *VARCHAR2 `json:"KENNR,omitempty"`
			MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
			VERTRIEBSFIRMA   *VARCHAR2 `json:"VERTRIEBSFIRMA,omitempty"`
			VERTRIEBSFIRMANR *NUMBER   `json:"VERTRIEBSFIRMA_NR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStaerkungVertriebResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaerkungVertriebResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			DATUM *DATE     `json:"DATUM,omitempty"`
			MROW  *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWirkstoffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			GENEHMIGT       *CHAR     `json:"GENEHMIGT,omitempty"`
			KATEGORIE       *VARCHAR2 `json:"KATEGORIE,omitempty"`
			MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			WIRKNR          *VARCHAR2 `json:"WIRKNR,omitempty"`
			WIRKSTOFFNAME   *VARCHAR2 `json:"WIRKSTOFFNAME,omitempty"`
			WIRKSTOFFNAMEEN *VARCHAR2 `json:"WIRKSTOFFNAME_EN,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWirkstoffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWirkstoffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWirkstoffGehaltResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			GEHALTBIO               *NUMBER   `json:"GEHALT_BIO,omitempty"`
			GEHALTBIOEINHEIT        *VARCHAR2 `json:"GEHALT_BIO_EINHEIT,omitempty"`
			GEHALTEINHEIT           *VARCHAR2 `json:"GEHALT_EINHEIT,omitempty"`
			GEHALTREIN              *NUMBER   `json:"GEHALT_REIN,omitempty"`
			GEHALTREINGRUNDSTRUKTUR *NUMBER   `json:"GEHALT_REIN_GRUNDSTRUKTUR,omitempty"`
			KENNR                   *VARCHAR2 `json:"KENNR,omitempty"`
			MROW                    *VARCHAR2 `json:"M_ROW$$,omitempty"`
			WIRKNR                  *VARCHAR2 `json:"WIRKNR,omitempty"`
			WIRKVAR                 *VARCHAR2 `json:"WIRKVAR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWirkstoffGehaltResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWirkstoffGehaltResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZusatzstoffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			ANTRAGSTELLER    *VARCHAR2 `json:"ANTRAGSTELLER,omitempty"`
			ANTRAGSTELLERNR  *NUMBER   `json:"ANTRAGSTELLER_NR,omitempty"`
			GENEHMIGUNGSENDE *DATE     `json:"GENEHMIGUNGSENDE,omitempty"`
			GENEHMIGUNGAM    *DATE     `json:"GENEHMIGUNG_AM,omitempty"`
			KENNR            *VARCHAR2 `json:"KENNR,omitempty"`
			MITTELNAME       *VARCHAR2 `json:"MITTELNAME,omitempty"`
			MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetZusatzstoffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZusatzstoffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZusatzstoffVertriebResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			KENNR            *VARCHAR2 `json:"KENNR,omitempty"`
			MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
			VERTRIEBSFIRMA   *VARCHAR2 `json:"VERTRIEBSFIRMA,omitempty"`
			VERTRIEBSFIRMANR *NUMBER   `json:"VERTRIEBSFIRMA_NR,omitempty"`
		} `json:"items,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetZusatzstoffVertriebResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZusatzstoffVertriebResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdresseWithResponse request returning *GetAdresseResponse
func (c *ClientWithResponses) GetAdresseWithResponse(ctx context.Context, params *GetAdresseParams, reqEditors ...RequestEditorFn) (*GetAdresseResponse, error) {
	rsp, err := c.GetAdresse(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdresseResponse(rsp)
}

// GetAntragWithResponse request returning *GetAntragResponse
func (c *ClientWithResponses) GetAntragWithResponse(ctx context.Context, params *GetAntragParams, reqEditors ...RequestEditorFn) (*GetAntragResponse, error) {
	rsp, err := c.GetAntrag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAntragResponse(rsp)
}

// GetAuflageReduWithResponse request returning *GetAuflageReduResponse
func (c *ClientWithResponses) GetAuflageReduWithResponse(ctx context.Context, params *GetAuflageReduParams, reqEditors ...RequestEditorFn) (*GetAuflageReduResponse, error) {
	rsp, err := c.GetAuflageRedu(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuflageReduResponse(rsp)
}

// GetAuflagenWithResponse request returning *GetAuflagenResponse
func (c *ClientWithResponses) GetAuflagenWithResponse(ctx context.Context, params *GetAuflagenParams, reqEditors ...RequestEditorFn) (*GetAuflagenResponse, error) {
	rsp, err := c.GetAuflagen(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuflagenResponse(rsp)
}

// GetAwgWithResponse request returning *GetAwgResponse
func (c *ClientWithResponses) GetAwgWithResponse(ctx context.Context, params *GetAwgParams, reqEditors ...RequestEditorFn) (*GetAwgResponse, error) {
	rsp, err := c.GetAwg(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgResponse(rsp)
}

// GetAwgAufwandWithResponse request returning *GetAwgAufwandResponse
func (c *ClientWithResponses) GetAwgAufwandWithResponse(ctx context.Context, params *GetAwgAufwandParams, reqEditors ...RequestEditorFn) (*GetAwgAufwandResponse, error) {
	rsp, err := c.GetAwgAufwand(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgAufwandResponse(rsp)
}

// GetAwgBemWithResponse request returning *GetAwgBemResponse
func (c *ClientWithResponses) GetAwgBemWithResponse(ctx context.Context, params *GetAwgBemParams, reqEditors ...RequestEditorFn) (*GetAwgBemResponse, error) {
	rsp, err := c.GetAwgBem(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgBemResponse(rsp)
}

// GetAwgKulturWithResponse request returning *GetAwgKulturResponse
func (c *ClientWithResponses) GetAwgKulturWithResponse(ctx context.Context, params *GetAwgKulturParams, reqEditors ...RequestEditorFn) (*GetAwgKulturResponse, error) {
	rsp, err := c.GetAwgKultur(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgKulturResponse(rsp)
}

// GetAwgPartnerWithResponse request returning *GetAwgPartnerResponse
func (c *ClientWithResponses) GetAwgPartnerWithResponse(ctx context.Context, params *GetAwgPartnerParams, reqEditors ...RequestEditorFn) (*GetAwgPartnerResponse, error) {
	rsp, err := c.GetAwgPartner(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgPartnerResponse(rsp)
}

// GetAwgPartnerAufwandWithResponse request returning *GetAwgPartnerAufwandResponse
func (c *ClientWithResponses) GetAwgPartnerAufwandWithResponse(ctx context.Context, params *GetAwgPartnerAufwandParams, reqEditors ...RequestEditorFn) (*GetAwgPartnerAufwandResponse, error) {
	rsp, err := c.GetAwgPartnerAufwand(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgPartnerAufwandResponse(rsp)
}

// GetAwgSchadorgWithResponse request returning *GetAwgSchadorgResponse
func (c *ClientWithResponses) GetAwgSchadorgWithResponse(ctx context.Context, params *GetAwgSchadorgParams, reqEditors ...RequestEditorFn) (*GetAwgSchadorgResponse, error) {
	rsp, err := c.GetAwgSchadorg(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgSchadorgResponse(rsp)
}

// GetAwgVerwendungszweckWithResponse request returning *GetAwgVerwendungszweckResponse
func (c *ClientWithResponses) GetAwgVerwendungszweckWithResponse(ctx context.Context, params *GetAwgVerwendungszweckParams, reqEditors ...RequestEditorFn) (*GetAwgVerwendungszweckResponse, error) {
	rsp, err := c.GetAwgVerwendungszweck(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgVerwendungszweckResponse(rsp)
}

// GetAwgWartezeitWithResponse request returning *GetAwgWartezeitResponse
func (c *ClientWithResponses) GetAwgWartezeitWithResponse(ctx context.Context, params *GetAwgWartezeitParams, reqEditors ...RequestEditorFn) (*GetAwgWartezeitResponse, error) {
	rsp, err := c.GetAwgWartezeit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgWartezeitResponse(rsp)
}

// GetAwgWartezeitAusgKulturWithResponse request returning *GetAwgWartezeitAusgKulturResponse
func (c *ClientWithResponses) GetAwgWartezeitAusgKulturWithResponse(ctx context.Context, params *GetAwgWartezeitAusgKulturParams, reqEditors ...RequestEditorFn) (*GetAwgWartezeitAusgKulturResponse, error) {
	rsp, err := c.GetAwgWartezeitAusgKultur(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgWartezeitAusgKulturResponse(rsp)
}

// GetAwgZeitpunktWithResponse request returning *GetAwgZeitpunktResponse
func (c *ClientWithResponses) GetAwgZeitpunktWithResponse(ctx context.Context, params *GetAwgZeitpunktParams, reqEditors ...RequestEditorFn) (*GetAwgZeitpunktResponse, error) {
	rsp, err := c.GetAwgZeitpunkt(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgZeitpunktResponse(rsp)
}

// GetAwgZulassungWithResponse request returning *GetAwgZulassungResponse
func (c *ClientWithResponses) GetAwgZulassungWithResponse(ctx context.Context, params *GetAwgZulassungParams, reqEditors ...RequestEditorFn) (*GetAwgZulassungResponse, error) {
	rsp, err := c.GetAwgZulassung(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAwgZulassungResponse(rsp)
}

// GetGhsGefahrenhinweiseWithResponse request returning *GetGhsGefahrenhinweiseResponse
func (c *ClientWithResponses) GetGhsGefahrenhinweiseWithResponse(ctx context.Context, params *GetGhsGefahrenhinweiseParams, reqEditors ...RequestEditorFn) (*GetGhsGefahrenhinweiseResponse, error) {
	rsp, err := c.GetGhsGefahrenhinweise(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGhsGefahrenhinweiseResponse(rsp)
}

// GetGhsGefahrensymboleWithResponse request returning *GetGhsGefahrensymboleResponse
func (c *ClientWithResponses) GetGhsGefahrensymboleWithResponse(ctx context.Context, params *GetGhsGefahrensymboleParams, reqEditors ...RequestEditorFn) (*GetGhsGefahrensymboleResponse, error) {
	rsp, err := c.GetGhsGefahrensymbole(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGhsGefahrensymboleResponse(rsp)
}

// GetGhsSicherheitshinweiseWithResponse request returning *GetGhsSicherheitshinweiseResponse
func (c *ClientWithResponses) GetGhsSicherheitshinweiseWithResponse(ctx context.Context, params *GetGhsSicherheitshinweiseParams, reqEditors ...RequestEditorFn) (*GetGhsSicherheitshinweiseResponse, error) {
	rsp, err := c.GetGhsSicherheitshinweise(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGhsSicherheitshinweiseResponse(rsp)
}

// GetGhsSignalwoerterWithResponse request returning *GetGhsSignalwoerterResponse
func (c *ClientWithResponses) GetGhsSignalwoerterWithResponse(ctx context.Context, params *GetGhsSignalwoerterParams, reqEditors ...RequestEditorFn) (*GetGhsSignalwoerterResponse, error) {
	rsp, err := c.GetGhsSignalwoerter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGhsSignalwoerterResponse(rsp)
}

// GetHinweisWithResponse request returning *GetHinweisResponse
func (c *ClientWithResponses) GetHinweisWithResponse(ctx context.Context, params *GetHinweisParams, reqEditors ...RequestEditorFn) (*GetHinweisResponse, error) {
	rsp, err := c.GetHinweis(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHinweisResponse(rsp)
}

// GetKodeWithResponse request returning *GetKodeResponse
func (c *ClientWithResponses) GetKodeWithResponse(ctx context.Context, params *GetKodeParams, reqEditors ...RequestEditorFn) (*GetKodeResponse, error) {
	rsp, err := c.GetKode(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKodeResponse(rsp)
}

// GetKodelisteWithResponse request returning *GetKodelisteResponse
func (c *ClientWithResponses) GetKodelisteWithResponse(ctx context.Context, params *GetKodelisteParams, reqEditors ...RequestEditorFn) (*GetKodelisteResponse, error) {
	rsp, err := c.GetKodeliste(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKodelisteResponse(rsp)
}

// GetKodelisteFeldnameWithResponse request returning *GetKodelisteFeldnameResponse
func (c *ClientWithResponses) GetKodelisteFeldnameWithResponse(ctx context.Context, params *GetKodelisteFeldnameParams, reqEditors ...RequestEditorFn) (*GetKodelisteFeldnameResponse, error) {
	rsp, err := c.GetKodelisteFeldname(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKodelisteFeldnameResponse(rsp)
}

// GetKulturGruppeWithResponse request returning *GetKulturGruppeResponse
func (c *ClientWithResponses) GetKulturGruppeWithResponse(ctx context.Context, params *GetKulturGruppeParams, reqEditors ...RequestEditorFn) (*GetKulturGruppeResponse, error) {
	rsp, err := c.GetKulturGruppe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKulturGruppeResponse(rsp)
}

// GetMittelWithResponse request returning *GetMittelResponse
func (c *ClientWithResponses) GetMittelWithResponse(ctx context.Context, params *GetMittelParams, reqEditors ...RequestEditorFn) (*GetMittelResponse, error) {
	rsp, err := c.GetMittel(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMittelResponse(rsp)
}

// GetMittelAbgelaufenWithResponse request returning *GetMittelAbgelaufenResponse
func (c *ClientWithResponses) GetMittelAbgelaufenWithResponse(ctx context.Context, params *GetMittelAbgelaufenParams, reqEditors ...RequestEditorFn) (*GetMittelAbgelaufenResponse, error) {
	rsp, err := c.GetMittelAbgelaufen(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMittelAbgelaufenResponse(rsp)
}

// GetMittelAbpackungWithResponse request returning *GetMittelAbpackungResponse
func (c *ClientWithResponses) GetMittelAbpackungWithResponse(ctx context.Context, params *GetMittelAbpackungParams, reqEditors ...RequestEditorFn) (*GetMittelAbpackungResponse, error) {
	rsp, err := c.GetMittelAbpackung(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMittelAbpackungResponse(rsp)
}

// GetMittelGefahrenSymbolWithResponse request returning *GetMittelGefahrenSymbolResponse
func (c *ClientWithResponses) GetMittelGefahrenSymbolWithResponse(ctx context.Context, params *GetMittelGefahrenSymbolParams, reqEditors ...RequestEditorFn) (*GetMittelGefahrenSymbolResponse, error) {
	rsp, err := c.GetMittelGefahrenSymbol(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMittelGefahrenSymbolResponse(rsp)
}

// GetMittelVertriebWithResponse request returning *GetMittelVertriebResponse
func (c *ClientWithResponses) GetMittelVertriebWithResponse(ctx context.Context, params *GetMittelVertriebParams, reqEditors ...RequestEditorFn) (*GetMittelVertriebResponse, error) {
	rsp, err := c.GetMittelVertrieb(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMittelVertriebResponse(rsp)
}

// GetMittelWirkbereichWithResponse request returning *GetMittelWirkbereichResponse
func (c *ClientWithResponses) GetMittelWirkbereichWithResponse(ctx context.Context, params *GetMittelWirkbereichParams, reqEditors ...RequestEditorFn) (*GetMittelWirkbereichResponse, error) {
	rsp, err := c.GetMittelWirkbereich(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMittelWirkbereichResponse(rsp)
}

// GetParallelimportAbgelaufenWithResponse request returning *GetParallelimportAbgelaufenResponse
func (c *ClientWithResponses) GetParallelimportAbgelaufenWithResponse(ctx context.Context, params *GetParallelimportAbgelaufenParams, reqEditors ...RequestEditorFn) (*GetParallelimportAbgelaufenResponse, error) {
	rsp, err := c.GetParallelimportAbgelaufen(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetParallelimportAbgelaufenResponse(rsp)
}

// GetParallelimportGueltigWithResponse request returning *GetParallelimportGueltigResponse
func (c *ClientWithResponses) GetParallelimportGueltigWithResponse(ctx context.Context, params *GetParallelimportGueltigParams, reqEditors ...RequestEditorFn) (*GetParallelimportGueltigResponse, error) {
	rsp, err := c.GetParallelimportGueltig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetParallelimportGueltigResponse(rsp)
}

// GetSchadorgGruppeWithResponse request returning *GetSchadorgGruppeResponse
func (c *ClientWithResponses) GetSchadorgGruppeWithResponse(ctx context.Context, params *GetSchadorgGruppeParams, reqEditors ...RequestEditorFn) (*GetSchadorgGruppeResponse, error) {
	rsp, err := c.GetSchadorgGruppe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchadorgGruppeResponse(rsp)
}

// GetStaerkungWithResponse request returning *GetStaerkungResponse
func (c *ClientWithResponses) GetStaerkungWithResponse(ctx context.Context, params *GetStaerkungParams, reqEditors ...RequestEditorFn) (*GetStaerkungResponse, error) {
	rsp, err := c.GetStaerkung(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaerkungResponse(rsp)
}

// GetStaerkungVertriebWithResponse request returning *GetStaerkungVertriebResponse
func (c *ClientWithResponses) GetStaerkungVertriebWithResponse(ctx context.Context, params *GetStaerkungVertriebParams, reqEditors ...RequestEditorFn) (*GetStaerkungVertriebResponse, error) {
	rsp, err := c.GetStaerkungVertrieb(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaerkungVertriebResponse(rsp)
}

// GetStandWithResponse request returning *GetStandResponse
func (c *ClientWithResponses) GetStandWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStandResponse, error) {
	rsp, err := c.GetStand(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStandResponse(rsp)
}

// GetWirkstoffWithResponse request returning *GetWirkstoffResponse
func (c *ClientWithResponses) GetWirkstoffWithResponse(ctx context.Context, params *GetWirkstoffParams, reqEditors ...RequestEditorFn) (*GetWirkstoffResponse, error) {
	rsp, err := c.GetWirkstoff(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWirkstoffResponse(rsp)
}

// GetWirkstoffGehaltWithResponse request returning *GetWirkstoffGehaltResponse
func (c *ClientWithResponses) GetWirkstoffGehaltWithResponse(ctx context.Context, params *GetWirkstoffGehaltParams, reqEditors ...RequestEditorFn) (*GetWirkstoffGehaltResponse, error) {
	rsp, err := c.GetWirkstoffGehalt(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWirkstoffGehaltResponse(rsp)
}

// GetZusatzstoffWithResponse request returning *GetZusatzstoffResponse
func (c *ClientWithResponses) GetZusatzstoffWithResponse(ctx context.Context, params *GetZusatzstoffParams, reqEditors ...RequestEditorFn) (*GetZusatzstoffResponse, error) {
	rsp, err := c.GetZusatzstoff(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZusatzstoffResponse(rsp)
}

// GetZusatzstoffVertriebWithResponse request returning *GetZusatzstoffVertriebResponse
func (c *ClientWithResponses) GetZusatzstoffVertriebWithResponse(ctx context.Context, params *GetZusatzstoffVertriebParams, reqEditors ...RequestEditorFn) (*GetZusatzstoffVertriebResponse, error) {
	rsp, err := c.GetZusatzstoffVertrieb(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZusatzstoffVertriebResponse(rsp)
}

// ParseGetAdresseResponse parses an HTTP response from a GetAdresseWithResponse call
func ParseGetAdresseResponse(rsp *http.Response) (*GetAdresseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdresseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				ADRESSENR       *NUMBER   `json:"ADRESSE_NR,omitempty"`
				ANSCHRIFT1      *VARCHAR2 `json:"ANSCHRIFT_1,omitempty"`
				ANSCHRIFT2      *VARCHAR2 `json:"ANSCHRIFT_2,omitempty"`
				ANSCHRIFT3      *VARCHAR2 `json:"ANSCHRIFT_3,omitempty"`
				ANSCHRIFT4      *VARCHAR2 `json:"ANSCHRIFT_4,omitempty"`
				ANSCHRIFT5      *VARCHAR2 `json:"ANSCHRIFT_5,omitempty"`
				ANSCHRIFT6      *VARCHAR2 `json:"ANSCHRIFT_6,omitempty"`
				ANSPRECHPARTNER *VARCHAR2 `json:"ANSPRECHPARTNER,omitempty"`
				EMAIL           *VARCHAR2 `json:"E_MAIL,omitempty"`
				FAX             *VARCHAR2 `json:"FAX,omitempty"`
				FIRMA           *VARCHAR2 `json:"FIRMA,omitempty"`
				FIRMENNAME      *VARCHAR2 `json:"FIRMENNAME,omitempty"`
				LAND            *VARCHAR2 `json:"LAND,omitempty"`
				TELEFON         *VARCHAR2 `json:"TELEFON,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAntragResponse parses an HTTP response from a GetAntragWithResponse call
func ParseGetAntragResponse(rsp *http.Response) (*GetAntragResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAntragResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				ANTRAGNR        *VARCHAR2 `json:"ANTRAGNR,omitempty"`
				ANTRAGSTELLER   *VARCHAR2 `json:"ANTRAGSTELLER,omitempty"`
				ANTRAGSTELLERNR *NUMBER   `json:"ANTRAGSTELLER_NR,omitempty"`
				KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuflageReduResponse parses an HTTP response from a GetAuflageReduWithResponse call
func ParseGetAuflageReduResponse(rsp *http.Response) (*GetAuflageReduResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuflageReduResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AUFLAGENR   *NUMBER   `json:"AUFLAGENR,omitempty"`
				KATEGORIE   *VARCHAR2 `json:"KATEGORIE,omitempty"`
				MROW        *VARCHAR2 `json:"M_ROW$$,omitempty"`
				REDUABSTAND *VARCHAR2 `json:"REDU_ABSTAND,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuflagenResponse parses an HTTP response from a GetAuflagenWithResponse call
func ParseGetAuflagenResponse(rsp *http.Response) (*GetAuflagenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuflagenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				ABSTAND           *NUMBER   `json:"ABSTAND,omitempty"`
				ANWENDBEST        *CHAR     `json:"ANWENDBEST,omitempty"`
				ANWENDUNGSTECHNIK *VARCHAR2 `json:"ANWENDUNGSTECHNIK,omitempty"`
				AUFLAGE           *VARCHAR2 `json:"AUFLAGE,omitempty"`
				AUFLAGENR         *NUMBER   `json:"AUFLAGENR,omitempty"`
				EBENE             *VARCHAR2 `json:"EBENE,omitempty"`
				KULTUR            *VARCHAR2 `json:"KULTUR,omitempty"`
				MROW              *VARCHAR2 `json:"M_ROW$$,omitempty"`
				REDUABSTAND       *VARCHAR2 `json:"REDU_ABSTAND,omitempty"`
				WEITEREBEDINGUNG  *VARCHAR2 `json:"WEITERE_BEDINGUNG,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgResponse parses an HTTP response from a GetAwgWithResponse call
func ParseGetAwgResponse(rsp *http.Response) (*GetAwgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				ANTRAGNR                   *VARCHAR2 `json:"ANTRAGNR,omitempty"`
				ANWENDUNGENANZJEBEFALL     *NUMBER   `json:"ANWENDUNGEN_ANZ_JE_BEFALL,omitempty"`
				ANWENDUNGENMAXJEKULTUR     *NUMBER   `json:"ANWENDUNGEN_MAX_JE_KULTUR,omitempty"`
				ANWENDUNGENMAXJEVEGETATION *NUMBER   `json:"ANWENDUNGEN_MAX_JE_VEGETATION,omitempty"`
				ANWENDUNGSBEREICH          *VARCHAR2 `json:"ANWENDUNGSBEREICH,omitempty"`
				ANWENDUNGSTECHNIK          *VARCHAR2 `json:"ANWENDUNGSTECHNIK,omitempty"`
				AWGNR                      *VARCHAR2 `json:"AWGNR,omitempty"`
				AWGID                      *VARCHAR2 `json:"AWG_ID,omitempty"`
				AWABSTANDBIS               *NUMBER   `json:"AW_ABSTAND_BIS,omitempty"`
				AWABSTANDEINHEIT           *VARCHAR2 `json:"AW_ABSTAND_EINHEIT,omitempty"`
				AWABSTANDVON               *NUMBER   `json:"AW_ABSTAND_VON,omitempty"`
				EINSATZGEBIET              *VARCHAR2 `json:"EINSATZGEBIET,omitempty"`
				GENEHMIGUNG                *CHAR     `json:"GENEHMIGUNG,omitempty"`
				HUK                        *CHAR     `json:"HUK,omitempty"`
				KENNR                      *VARCHAR2 `json:"KENNR,omitempty"`
				KULTURERL                  *VARCHAR2 `json:"KULTUR_ERL,omitempty"`
				MROW                       *VARCHAR2 `json:"M_ROW$$,omitempty"`
				SCHADORGERL                *VARCHAR2 `json:"SCHADORG_ERL,omitempty"`
				STADIUMKULTURBEM           *VARCHAR2 `json:"STADIUM_KULTUR_BEM,omitempty"`
				STADIUMKULTURBIS           *VARCHAR2 `json:"STADIUM_KULTUR_BIS,omitempty"`
				STADIUMKULTURKODELISTE     *NUMBER   `json:"STADIUM_KULTUR_KODELISTE,omitempty"`
				STADIUMKULTURVON           *VARCHAR2 `json:"STADIUM_KULTUR_VON,omitempty"`
				STADIUMSCHADORGBEM         *VARCHAR2 `json:"STADIUM_SCHADORG_BEM,omitempty"`
				STADIUMSCHADORGBIS         *VARCHAR2 `json:"STADIUM_SCHADORG_BIS,omitempty"`
				STADIUMSCHADORGKODELISTE   *NUMBER   `json:"STADIUM_SCHADORG_KODELISTE,omitempty"`
				STADIUMSCHADORGVON         *VARCHAR2 `json:"STADIUM_SCHADORG_VON,omitempty"`
				WIRKUNGSBEREICH            *VARCHAR2 `json:"WIRKUNGSBEREICH,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgAufwandResponse parses an HTTP response from a GetAwgAufwandWithResponse call
func ParseGetAwgAufwandResponse(rsp *http.Response) (*GetAwgAufwandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgAufwandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AUFWANDBEDINGUNG *VARCHAR2 `json:"AUFWANDBEDINGUNG,omitempty"`
				AWGID            *VARCHAR2 `json:"AWG_ID,omitempty"`
				MAUFWAND         *NUMBER   `json:"M_AUFWAND,omitempty"`
				MAUFWANDEINHEIT  *VARCHAR2 `json:"M_AUFWAND_EINHEIT,omitempty"`
				MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
				SORTIERNR        *NUMBER   `json:"SORTIER_NR,omitempty"`
				WAUFWANDBIS      *NUMBER   `json:"W_AUFWAND_BIS,omitempty"`
				WAUFWANDEINHEIT  *VARCHAR2 `json:"W_AUFWAND_EINHEIT,omitempty"`
				WAUFWANDVON      *NUMBER   `json:"W_AUFWAND_VON,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgBemResponse parses an HTTP response from a GetAwgBemWithResponse call
func ParseGetAwgBemResponse(rsp *http.Response) (*GetAwgBemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgBemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AUFLAGEBEM     *VARCHAR2 `json:"AUFLAGE_BEM,omitempty"`
				AUFLAGEBEREICH *CHAR     `json:"AUFLAGE_BEREICH,omitempty"`
				AWGID          *VARCHAR2 `json:"AWG_ID,omitempty"`
				MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgKulturResponse parses an HTTP response from a GetAwgKulturWithResponse call
func ParseGetAwgKulturResponse(rsp *http.Response) (*GetAwgKulturResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgKulturResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AUSGENOMMEN *CHAR     `json:"AUSGENOMMEN,omitempty"`
				AWGID       *VARCHAR2 `json:"AWG_ID,omitempty"`
				KULTUR      *VARCHAR2 `json:"KULTUR,omitempty"`
				MROW        *VARCHAR2 `json:"M_ROW$$,omitempty"`
				SORTIERNR   *NUMBER   `json:"SORTIER_NR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgPartnerResponse parses an HTTP response from a GetAwgPartnerWithResponse call
func ParseGetAwgPartnerResponse(rsp *http.Response) (*GetAwgPartnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgPartnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AWGID        *VARCHAR2 `json:"AWG_ID,omitempty"`
				MISCHUNGART  *VARCHAR2 `json:"MISCHUNG_ART,omitempty"`
				MROW         *VARCHAR2 `json:"M_ROW$$,omitempty"`
				PARTNERKENNR *VARCHAR2 `json:"PARTNER_KENNR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgPartnerAufwandResponse parses an HTTP response from a GetAwgPartnerAufwandWithResponse call
func ParseGetAwgPartnerAufwandResponse(rsp *http.Response) (*GetAwgPartnerAufwandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgPartnerAufwandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AUFWANDBEDINGUNG *VARCHAR2 `json:"AUFWANDBEDINGUNG,omitempty"`
				AWGID            *VARCHAR2 `json:"AWG_ID,omitempty"`
				MAUFWAND         *NUMBER   `json:"M_AUFWAND,omitempty"`
				MAUFWANDEINHEIT  *VARCHAR2 `json:"M_AUFWAND_EINHEIT,omitempty"`
				MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
				PARTNERKENNR     *VARCHAR2 `json:"PARTNER_KENNR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgSchadorgResponse parses an HTTP response from a GetAwgSchadorgWithResponse call
func ParseGetAwgSchadorgResponse(rsp *http.Response) (*GetAwgSchadorgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgSchadorgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AUSGENOMMEN *CHAR     `json:"AUSGENOMMEN,omitempty"`
				AWGID       *VARCHAR2 `json:"AWG_ID,omitempty"`
				MROW        *VARCHAR2 `json:"M_ROW$$,omitempty"`
				SCHADORG    *VARCHAR2 `json:"SCHADORG,omitempty"`
				SORTIERNR   *NUMBER   `json:"SORTIER_NR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgVerwendungszweckResponse parses an HTTP response from a GetAwgVerwendungszweckWithResponse call
func ParseGetAwgVerwendungszweckResponse(rsp *http.Response) (*GetAwgVerwendungszweckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgVerwendungszweckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AWGID            *VARCHAR2 `json:"AWG_ID,omitempty"`
				MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
				VERWENDUNGSZWECK *VARCHAR2 `json:"VERWENDUNGSZWECK,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgWartezeitResponse parses an HTTP response from a GetAwgWartezeitWithResponse call
func ParseGetAwgWartezeitResponse(rsp *http.Response) (*GetAwgWartezeitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgWartezeitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				ANWENDUNGSBEREICH   *VARCHAR2 `json:"ANWENDUNGSBEREICH,omitempty"`
				AWGID               *VARCHAR2 `json:"AWG_ID,omitempty"`
				AWGWARTEZEITNR      *NUMBER   `json:"AWG_WARTEZEIT_NR,omitempty"`
				ERLAEUTERUNG        *VARCHAR2 `json:"ERLAEUTERUNG,omitempty"`
				GESETZTWARTEZEIT    *NUMBER   `json:"GESETZT_WARTEZEIT,omitempty"`
				GESETZTWARTEZEITBEM *VARCHAR2 `json:"GESETZT_WARTEZEIT_BEM,omitempty"`
				KULTUR              *VARCHAR2 `json:"KULTUR,omitempty"`
				MROW                *VARCHAR2 `json:"M_ROW$$,omitempty"`
				SORTIERNR           *NUMBER   `json:"SORTIER_NR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgWartezeitAusgKulturResponse parses an HTTP response from a GetAwgWartezeitAusgKulturWithResponse call
func ParseGetAwgWartezeitAusgKulturResponse(rsp *http.Response) (*GetAwgWartezeitAusgKulturResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgWartezeitAusgKulturResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AWGWARTEZEITNR *NUMBER   `json:"AWG_WARTEZEIT_NR,omitempty"`
				KULTUR         *VARCHAR2 `json:"KULTUR,omitempty"`
				MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgZeitpunktResponse parses an HTTP response from a GetAwgZeitpunktWithResponse call
func ParseGetAwgZeitpunktResponse(rsp *http.Response) (*GetAwgZeitpunktResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgZeitpunktResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AWGID           *VARCHAR2 `json:"AWG_ID,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
				OPERANDZUVORHER *VARCHAR2 `json:"OPERAND_ZU_VORHER,omitempty"`
				SORTIERNR       *NUMBER   `json:"SORTIER_NR,omitempty"`
				ZEITPUNKT       *VARCHAR2 `json:"ZEITPUNKT,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAwgZulassungResponse parses an HTTP response from a GetAwgZulassungWithResponse call
func ParseGetAwgZulassungResponse(rsp *http.Response) (*GetAwgZulassungResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAwgZulassungResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AWGID   *VARCHAR2 `json:"AWG_ID,omitempty"`
				MROW    *VARCHAR2 `json:"M_ROW$$,omitempty"`
				ZULENDE *DATE     `json:"ZUL_ENDE,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGhsGefahrenhinweiseResponse parses an HTTP response from a GetGhsGefahrenhinweiseWithResponse call
func ParseGetGhsGefahrenhinweiseResponse(rsp *http.Response) (*GetGhsGefahrenhinweiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGhsGefahrenhinweiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				GEFAHRENHINWEIS *VARCHAR2 `json:"GEFAHRENHINWEIS,omitempty"`
				KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGhsGefahrensymboleResponse parses an HTTP response from a GetGhsGefahrensymboleWithResponse call
func ParseGetGhsGefahrensymboleResponse(rsp *http.Response) (*GetGhsGefahrensymboleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGhsGefahrensymboleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				GEFAHRENSYMBOL *VARCHAR2 `json:"GEFAHRENSYMBOL,omitempty"`
				KENNR          *VARCHAR2 `json:"KENNR,omitempty"`
				MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGhsSicherheitshinweiseResponse parses an HTTP response from a GetGhsSicherheitshinweiseWithResponse call
func ParseGetGhsSicherheitshinweiseResponse(rsp *http.Response) (*GetGhsSicherheitshinweiseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGhsSicherheitshinweiseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KENNR              *VARCHAR2 `json:"KENNR,omitempty"`
				MROW               *VARCHAR2 `json:"M_ROW$$,omitempty"`
				SICHERHEITSHINWEIS *VARCHAR2 `json:"SICHERHEITSHINWEIS,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGhsSignalwoerterResponse parses an HTTP response from a GetGhsSignalwoerterWithResponse call
func ParseGetGhsSignalwoerterResponse(rsp *http.Response) (*GetGhsSignalwoerterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGhsSignalwoerterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KENNR      *VARCHAR2 `json:"KENNR,omitempty"`
				MROW       *VARCHAR2 `json:"M_ROW$$,omitempty"`
				SIGNALWORT *VARCHAR2 `json:"SIGNALWORT,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHinweisResponse parses an HTTP response from a GetHinweisWithResponse call
func ParseGetHinweisResponse(rsp *http.Response) (*GetHinweisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHinweisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				EBENE   *VARCHAR2 `json:"EBENE,omitempty"`
				HINWEIS *VARCHAR2 `json:"HINWEIS,omitempty"`
				MROW    *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetKodeResponse parses an HTTP response from a GetKodeWithResponse call
func ParseGetKodeResponse(rsp *http.Response) (*GetKodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KODE      *VARCHAR2 `json:"KODE,omitempty"`
				KODELISTE *NUMBER   `json:"KODELISTE,omitempty"`
				KODETEXT  *VARCHAR2 `json:"KODETEXT,omitempty"`
				SPERRE    *CHAR     `json:"SPERRE,omitempty"`
				SPRACHE   *VARCHAR2 `json:"SPRACHE,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetKodelisteResponse parses an HTTP response from a GetKodelisteWithResponse call
func ParseGetKodelisteResponse(rsp *http.Response) (*GetKodelisteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKodelisteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KODELISTE  *NUMBER   `json:"KODELISTE,omitempty"`
				LISTENNAME *VARCHAR2 `json:"LISTENNAME,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetKodelisteFeldnameResponse parses an HTTP response from a GetKodelisteFeldnameWithResponse call
func ParseGetKodelisteFeldnameResponse(rsp *http.Response) (*GetKodelisteFeldnameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKodelisteFeldnameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				FELDNAME  *VARCHAR2 `json:"FELDNAME,omitempty"`
				KODELISTE *NUMBER   `json:"KODELISTE,omitempty"`
				TABELLE   *VARCHAR2 `json:"TABELLE,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetKulturGruppeResponse parses an HTTP response from a GetKulturGruppeWithResponse call
func ParseGetKulturGruppeResponse(rsp *http.Response) (*GetKulturGruppeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKulturGruppeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KULTUR       *VARCHAR2 `json:"KULTUR,omitempty"`
				KULTURGRUPPE *VARCHAR2 `json:"KULTUR_GRUPPE,omitempty"`
				MROW         *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMittelResponse parses an HTTP response from a GetMittelWithResponse call
func ParseGetMittelResponse(rsp *http.Response) (*GetMittelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMittelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				FORMULIERUNGART *VARCHAR2 `json:"FORMULIERUNG_ART,omitempty"`
				KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
				MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
				ZULENDE         *DATE     `json:"ZUL_ENDE,omitempty"`
				ZULERSTMALIGAM  *DATE     `json:"ZUL_ERSTMALIG_AM,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMittelAbgelaufenResponse parses an HTTP response from a GetMittelAbgelaufenWithResponse call
func ParseGetMittelAbgelaufenResponse(rsp *http.Response) (*GetMittelAbgelaufenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMittelAbgelaufenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				AUFBRAUCHFRIST  *DATE     `json:"AUFBRAUCHFRIST,omitempty"`
				FORMULIERUNGART *VARCHAR2 `json:"FORMULIERUNG_ART,omitempty"`
				KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
				MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
				STATUS          *VARCHAR2 `json:"STATUS,omitempty"`
				ZULENDE         *DATE     `json:"ZUL_ENDE,omitempty"`
				ZULERSTMALIGAM  *DATE     `json:"ZUL_ERSTMALIG_AM,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMittelAbpackungResponse parses an HTTP response from a GetMittelAbpackungWithResponse call
func ParseGetMittelAbpackungResponse(rsp *http.Response) (*GetMittelAbpackungResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMittelAbpackungResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				ANZAHL                  *VARCHAR2 `json:"ANZAHL,omitempty"`
				INHALTEINHEIT           *VARCHAR2 `json:"INHALT_EINHEIT,omitempty"`
				KENNR                   *VARCHAR2 `json:"KENNR,omitempty"`
				MENGE                   *VARCHAR2 `json:"MENGE,omitempty"`
				MROW                    *VARCHAR2 `json:"M_ROW$$,omitempty"`
				NICHTBERUFLICHEANWENDER *CHAR     `json:"NICHTBERUFLICHE_ANWENDER,omitempty"`
				VERPACKUNGSART          *VARCHAR2 `json:"VERPACKUNGSART,omitempty"`
				VERPACKUNGSMATERIAL     *VARCHAR2 `json:"VERPACKUNGSMATERIAL,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMittelGefahrenSymbolResponse parses an HTTP response from a GetMittelGefahrenSymbolWithResponse call
func ParseGetMittelGefahrenSymbolResponse(rsp *http.Response) (*GetMittelGefahrenSymbolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMittelGefahrenSymbolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				GEFAHRENSYMBOL *VARCHAR2 `json:"GEFAHREN_SYMBOL,omitempty"`
				KENNR          *VARCHAR2 `json:"KENNR,omitempty"`
				MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMittelVertriebResponse parses an HTTP response from a GetMittelVertriebWithResponse call
func ParseGetMittelVertriebResponse(rsp *http.Response) (*GetMittelVertriebResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMittelVertriebResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KENNR            *VARCHAR2 `json:"KENNR,omitempty"`
				MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
				VERTRIEBSFIRMA   *VARCHAR2 `json:"VERTRIEBSFIRMA,omitempty"`
				VERTRIEBSFIRMANR *NUMBER   `json:"VERTRIEBSFIRMA_NR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMittelWirkbereichResponse parses an HTTP response from a GetMittelWirkbereichWithResponse call
func ParseGetMittelWirkbereichResponse(rsp *http.Response) (*GetMittelWirkbereichResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMittelWirkbereichResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
				WIRKUNGSBEREICH *VARCHAR2 `json:"WIRKUNGSBEREICH,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetParallelimportAbgelaufenResponse parses an HTTP response from a GetParallelimportAbgelaufenWithResponse call
func ParseGetParallelimportAbgelaufenResponse(rsp *http.Response) (*GetParallelimportAbgelaufenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetParallelimportAbgelaufenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				BESCHEIDDATUM   *DATE     `json:"BESCHEID_DATUM,omitempty"`
				BESCHEINIGUNG   *CHAR     `json:"BESCHEINIGUNG,omitempty"`
				GUELTIG         *DATE     `json:"GUELTIG,omitempty"`
				IMPORTEUR       *VARCHAR2 `json:"IMPORTEUR,omitempty"`
				IMPORTEURNR     *NUMBER   `json:"IMPORTEUR_NR,omitempty"`
				IMPORTEURTXT    *VARCHAR2 `json:"IMPORTEUR_TXT,omitempty"`
				MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
				PIBESCHEIDNR    *VARCHAR2 `json:"PI_BESCHEIDNR,omitempty"`
				PIKENNZIFFER    *VARCHAR2 `json:"PI_KENNZIFFER,omitempty"`
				PIMITTELNAME    *VARCHAR2 `json:"PI_MITTELNAME,omitempty"`
				PIPSMNR         *VARCHAR2 `json:"PI_PSMNR,omitempty"`
				PIREFERENZKENNR *VARCHAR2 `json:"PI_REFERENZ_KENNR,omitempty"`
				PISTATUS        *VARCHAR2 `json:"PI_STATUS,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetParallelimportGueltigResponse parses an HTTP response from a GetParallelimportGueltigWithResponse call
func ParseGetParallelimportGueltigResponse(rsp *http.Response) (*GetParallelimportGueltigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetParallelimportGueltigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				BESCHEIDDATUM   *DATE     `json:"BESCHEID_DATUM,omitempty"`
				BESCHEINIGUNG   *CHAR     `json:"BESCHEINIGUNG,omitempty"`
				GUELTIG         *DATE     `json:"GUELTIG,omitempty"`
				IMPORTEUR       *VARCHAR2 `json:"IMPORTEUR,omitempty"`
				IMPORTEURNR     *NUMBER   `json:"IMPORTEUR_NR,omitempty"`
				IMPORTEURTXT    *VARCHAR2 `json:"IMPORTEUR_TXT,omitempty"`
				MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
				PIBESCHEIDNR    *VARCHAR2 `json:"PI_BESCHEIDNR,omitempty"`
				PIKENNZIFFER    *VARCHAR2 `json:"PI_KENNZIFFER,omitempty"`
				PIMITTELNAME    *VARCHAR2 `json:"PI_MITTELNAME,omitempty"`
				PIPSMNR         *VARCHAR2 `json:"PI_PSMNR,omitempty"`
				PIREFERENZKENNR *VARCHAR2 `json:"PI_REFERENZ_KENNR,omitempty"`
				PISTATUS        *VARCHAR2 `json:"PI_STATUS,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSchadorgGruppeResponse parses an HTTP response from a GetSchadorgGruppeWithResponse call
func ParseGetSchadorgGruppeResponse(rsp *http.Response) (*GetSchadorgGruppeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchadorgGruppeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				MROW           *VARCHAR2 `json:"M_ROW$$,omitempty"`
				SCHADORG       *VARCHAR2 `json:"SCHADORG,omitempty"`
				SCHADORGGRUPPE *VARCHAR2 `json:"SCHADORG_GRUPPE,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStaerkungResponse parses an HTTP response from a GetStaerkungWithResponse call
func ParseGetStaerkungResponse(rsp *http.Response) (*GetStaerkungResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaerkungResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				ANTRAGSTELLER   *VARCHAR2 `json:"ANTRAGSTELLER,omitempty"`
				ANTRAGSTELLERNR *NUMBER   `json:"ANTRAGSTELLER_NR,omitempty"`
				GENEHMIGUNGAM   *DATE     `json:"GENEHMIGUNG_AM,omitempty"`
				KENNR           *VARCHAR2 `json:"KENNR,omitempty"`
				MITTELNAME      *VARCHAR2 `json:"MITTELNAME,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStaerkungVertriebResponse parses an HTTP response from a GetStaerkungVertriebWithResponse call
func ParseGetStaerkungVertriebResponse(rsp *http.Response) (*GetStaerkungVertriebResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaerkungVertriebResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KENNR            *VARCHAR2 `json:"KENNR,omitempty"`
				MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
				VERTRIEBSFIRMA   *VARCHAR2 `json:"VERTRIEBSFIRMA,omitempty"`
				VERTRIEBSFIRMANR *NUMBER   `json:"VERTRIEBSFIRMA_NR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStandResponse parses an HTTP response from a GetStandWithResponse call
func ParseGetStandResponse(rsp *http.Response) (*GetStandResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				DATUM *DATE     `json:"DATUM,omitempty"`
				MROW  *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWirkstoffResponse parses an HTTP response from a GetWirkstoffWithResponse call
func ParseGetWirkstoffResponse(rsp *http.Response) (*GetWirkstoffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWirkstoffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				GENEHMIGT       *CHAR     `json:"GENEHMIGT,omitempty"`
				KATEGORIE       *VARCHAR2 `json:"KATEGORIE,omitempty"`
				MROW            *VARCHAR2 `json:"M_ROW$$,omitempty"`
				WIRKNR          *VARCHAR2 `json:"WIRKNR,omitempty"`
				WIRKSTOFFNAME   *VARCHAR2 `json:"WIRKSTOFFNAME,omitempty"`
				WIRKSTOFFNAMEEN *VARCHAR2 `json:"WIRKSTOFFNAME_EN,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWirkstoffGehaltResponse parses an HTTP response from a GetWirkstoffGehaltWithResponse call
func ParseGetWirkstoffGehaltResponse(rsp *http.Response) (*GetWirkstoffGehaltResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWirkstoffGehaltResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				GEHALTBIO               *NUMBER   `json:"GEHALT_BIO,omitempty"`
				GEHALTBIOEINHEIT        *VARCHAR2 `json:"GEHALT_BIO_EINHEIT,omitempty"`
				GEHALTEINHEIT           *VARCHAR2 `json:"GEHALT_EINHEIT,omitempty"`
				GEHALTREIN              *NUMBER   `json:"GEHALT_REIN,omitempty"`
				GEHALTREINGRUNDSTRUKTUR *NUMBER   `json:"GEHALT_REIN_GRUNDSTRUKTUR,omitempty"`
				KENNR                   *VARCHAR2 `json:"KENNR,omitempty"`
				MROW                    *VARCHAR2 `json:"M_ROW$$,omitempty"`
				WIRKNR                  *VARCHAR2 `json:"WIRKNR,omitempty"`
				WIRKVAR                 *VARCHAR2 `json:"WIRKVAR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetZusatzstoffResponse parses an HTTP response from a GetZusatzstoffWithResponse call
func ParseGetZusatzstoffResponse(rsp *http.Response) (*GetZusatzstoffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZusatzstoffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				ANTRAGSTELLER    *VARCHAR2 `json:"ANTRAGSTELLER,omitempty"`
				ANTRAGSTELLERNR  *NUMBER   `json:"ANTRAGSTELLER_NR,omitempty"`
				GENEHMIGUNGSENDE *DATE     `json:"GENEHMIGUNGSENDE,omitempty"`
				GENEHMIGUNGAM    *DATE     `json:"GENEHMIGUNG_AM,omitempty"`
				KENNR            *VARCHAR2 `json:"KENNR,omitempty"`
				MITTELNAME       *VARCHAR2 `json:"MITTELNAME,omitempty"`
				MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetZusatzstoffVertriebResponse parses an HTTP response from a GetZusatzstoffVertriebWithResponse call
func ParseGetZusatzstoffVertriebResponse(rsp *http.Response) (*GetZusatzstoffVertriebResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZusatzstoffVertriebResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				KENNR            *VARCHAR2 `json:"KENNR,omitempty"`
				MROW             *VARCHAR2 `json:"M_ROW$$,omitempty"`
				VERTRIEBSFIRMA   *VARCHAR2 `json:"VERTRIEBSFIRMA,omitempty"`
				VERTRIEBSFIRMANR *NUMBER   `json:"VERTRIEBSFIRMA_NR,omitempty"`
			} `json:"items,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
